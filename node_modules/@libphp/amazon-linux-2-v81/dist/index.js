"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFiles = exports.getSharedLibsFiles = exports.getPhpModulesFiles = exports.getPhpFiles = exports.getPhpCgi = exports.getPhpFpmIni = exports.getPhpFpm = exports.getPhpIni = exports.getPhp = exports.getComposer = exports.getRoot = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const NATIVE_DIR = path_1.default.resolve(__dirname, "../native");
function getRoot() {
    return path_1.default.dirname(__filename);
}
exports.getRoot = getRoot;
function getComposer() {
    return path_1.default.resolve(NATIVE_DIR, "php/composer");
}
exports.getComposer = getComposer;
function getPhp() {
    return path_1.default.resolve(NATIVE_DIR, "php/php");
}
exports.getPhp = getPhp;
function getPhpIni() {
    return path_1.default.resolve(NATIVE_DIR, "php/php.ini");
}
exports.getPhpIni = getPhpIni;
function getPhpFpm() {
    return path_1.default.resolve(NATIVE_DIR, "php/php-fpm");
}
exports.getPhpFpm = getPhpFpm;
function getPhpFpmIni() {
    return path_1.default.resolve(NATIVE_DIR, "php/php-fpm.ini");
}
exports.getPhpFpmIni = getPhpFpmIni;
function getPhpCgi() {
    return path_1.default.resolve(NATIVE_DIR, "php/php-cgi");
}
exports.getPhpCgi = getPhpCgi;
function getPhpFiles() {
    return walk(path_1.default.resolve(NATIVE_DIR, "php"), { prefix: "php" });
}
exports.getPhpFiles = getPhpFiles;
function getPhpModulesFiles() {
    return walk(path_1.default.resolve(NATIVE_DIR, "php/modules"), { prefix: "php/modules" });
}
exports.getPhpModulesFiles = getPhpModulesFiles;
async function getSharedLibsFiles() {
    return walk(path_1.default.resolve(NATIVE_DIR, "lib"), { prefix: "lib" });
}
exports.getSharedLibsFiles = getSharedLibsFiles;
async function getFiles() {
    return {
        ...await getPhpFiles(),
        ...await getPhpModulesFiles(),
        ...await getSharedLibsFiles(),
    };
}
exports.getFiles = getFiles;
async function walk(folder, options) {
    const walker = await fs_1.default.promises.readdir(folder, { withFileTypes: true });
    const files = walker.filter(item => !item.isDirectory());
    return Object.assign({}, ...files.map(file => {
        const filename = (options === null || options === void 0 ? void 0 : options.prefix) ? path_1.default.join(options.prefix, file.name) : file.name;
        const filepath = path_1.default.join(folder, file.name);
        return { [filename]: filepath };
    }));
}
